# UPDATE_DPU_OS - Update/Install BlueField Operating System (Default: yes)
UPDATE_DPU_OS="yes"
# openssl passwd -1 "<clear_password>"
# ubuntu_PASSWORD=''
ubuntu_PASSWORD='{{ DPU_UBUNTU_PASSWORD_HASH }}'
MTU={{ dpu_mtu }}

# bfb_modify_os â€“ SHELL function called after the file system is extracted on the target partitions.
# It can be used to modify files or create new files on the target file system mounted under
# /mnt. So the file path should look as follows: /mnt/<expected_path_on_target_OS>. This
# can be used to run a specific tool from the target OS (remember to add /mnt to the path for
# the tool).

bfb_modify_os()
{
    # Set hostname
    local hname="{{ bfb_hostname }}"
    echo ${hname} > /mnt/etc/hostname
    echo "127.0.0.1 ${hname}" >> /mnt/etc/hosts

    cat << EOFNET > /mnt/var/lib/cloud/seed/nocloud-net/network-config
network: {config: disabled}
EOFNET

    # Configure bond0
    cat << EOFBOND > /mnt/etc/netplan/50-mgmt.yaml
network:
  renderer: networkd
  ethernets:
    tmfifo_net0:
      dhcp4: false
      addresses:
        - 192.168.100.2/30
    oob_net0:
      dhcp4: true
      dhcp6: true
  version: 2
EOFBOND
    chmod 600 /mnt/etc/netplan/50-mgmt.yaml

    # Modules for kubernetes and DPDK
    cat << EOFMODULES >> /mnt/etc/modules-load.d/custom.conf
overlay
br_netfilter
vfio_pci
EOFMODULES

    # sysctl settings for kubernets
    cat << EOFSYSCTL >> /mnt/etc/sysctl.d/kubernetes.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOFSYSCTL

    # Provision hugepages as part of grub boot
    # Default to 2M hugepage size and provision 14 GB of hugepages
    # TMM requires 1.5GB of hugepages per thread (CPU core) so we
    # need 12 GB of hugepage memory for 8 threads of TMM.
    local grub_cmd="console=hvc0 console=ttyAMA0 earlycon=pl011,0x13010000 fixrttc net.ifnames=0 biosdevname=0 iommu.passthrough=1 cgroup_no_v1=net_prio,net_cls default_hugepagesz=2MB hugepagesz=2M hugepages=8192"
    sed -i -E "s|^(GRUB_CMDLINE_LINUX=\")(.*)\"|\1${grub_cmd}\"|" /mnt/etc/default/grub
    ilog "$(chroot /mnt env PATH=$PATH /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg)"

    # Provision SF to be used by the TMM on each PF
    # We will use the second SF to the TMM sfnum 1, and others are created
    # for future use or experimentation.
    rm -f /mnt/etc/mellanox/mlnx-sf.conf
    for pciid in $(lspci -nD 2> /dev/null | grep 15b3:a2d[26c] | awk '{print $1}')
        do
            cat << EOFSF >> /mnt/etc/mellanox/mlnx-sf.conf
/sbin/mlnx-sf --action create --device $pciid --sfnum 0 --enable-trust --hwaddr $(uuidgen | sed -e 's/-//;s/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
/sbin/mlnx-sf --action create --device $pciid --sfnum 1 --enable-trust --hwaddr $(uuidgen | sed -e 's/-//;s/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
/sbin/mlnx-sf --action create --device $pciid --sfnum 2 --enable-trust --hwaddr $(uuidgen | sed -e 's/-//;s/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
EOFSF
        done

    cat <<EOFSF > /mnt/etc/mellanox/mlnx-ovs.conf
CREATE_OVS_BRIDGES="yes"
OVS_BRIDGE1="br-lag"
OVS_BRIDGE1_PORTS="bond0 pf0hpf en3f0pf0sf1 en3f1pf1sf1"
OVS_BRIDGE2="not-used"
OVS_BRIDGE2_PORTS="dummy" # prevents bridge2 from being created
OVS_HW_OFFLOAD="yes"
EOFSF

    cat <<EOFBF >> /mnt/etc/mellanox/mlnx-bf.conf
LAG_HASH_MODE="yes"
EOFBF

    # Configure bond0
    cat << EOFBOND > /mnt/etc/netplan/70-bf-lag.yaml
network:
  renderer: networkd
  bonds:
    bond0:
      optional: true
      mtu: "$MTU"
      dhcp4: no
      interfaces: [p0, p1]
      parameters:
        mode: 802.3ad
        lacp-rate: fast
        mii-monitor-interval: 100
        transmit-hash-policy: "layer3+4"
  ethernets:
    p0:
      mtu: "$MTU"
      dhcp4: no
      optional: true
    p1:
      mtu: "$MTU"
      dhcp4: no
      optional: true
  version: 2
EOFBOND
    chmod 600 /mnt/etc/netplan/70-bf-lag.yaml
}

# bfb_post_install - SHELL function called as a last step before reboot.
# All partitions are unmounted at this stage.
# We use it to set the LAG_RESOURCE_ALLOCATION=1
bfb_post_install()
{
    log ===================== bfb_post_install =====================
    mst start
    mst_device=$(/bin/ls /dev/mst/mt*pciconf0 2> /dev/null)
    # Setting SF enable per Nvidia documentation
    # Ref: https://docs.nvidia.com/doca/sdk/nvidia+bluefield+dpu+scalable+function+user+guide/index.html
    # and DPDK documentation
    # Ref: https://doc.dpdk.org/guides-21.11/nics/mlx5.html
    log "Setting SF enable and BAR size for $mst_device"
    for mst_device in /dev/mst/mt*pciconf*
    do
      mlxconfig -y -d $mst_device s PF_BAR2_ENABLE=0 PER_PF_NUM_SF=1 PF_TOTAL_SF=20 PF_SF_BAR_SIZE=10 NUM_OF_VFS=46 LAG_RESOURCE_ALLOCATION=1 INTERNAL_CPU_OFFLOAD_ENGINE=0
    done
}
