---
- name: Install cert-manager via Helm and apply ClusterIssuer
  hosts: localhost
  gather_facts: false
  any_errors_fatal: true

  vars:
    # repo_root = one level above extra_playbooks/
    repo_root: "{{ (playbook_dir + '/..') | realpath }}"
    kubeconfig_path: "{{ repo_root }}/inventory/f5-bnk-cluster/artifacts/admin.conf"

    helm_repo_name: "jetstack"
    helm_repo_url: "https://charts.jetstack.io"
    helm_release: "cert-manager"
    helm_chart: "jetstack/cert-manager"
    helm_namespace: "cert-manager"
    helm_version: "v1.16.1"

    # Allow override:  -e "resources_dir=/abs/path"
    # We'll compute resources_dir later after probing candidates.
    issuer_manifest: "cluster-issuer.yaml"

    # Candidate locations to search (first existing wins)
    candidate_resource_dirs:
      - "{{ playbook_dir }}/resources"
      - "{{ repo_root }}/resources"
      - "{{ repo_root }}/inventory/f5-bnk-cluster/resources"

  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

  tasks:
    - name: Check kubeconfig exists
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kc

    - name: Fail if kubeconfig missing
      ansible.builtin.fail:
        msg: "Kubeconfig not found at {{ kubeconfig_path }}. Run Kubespray first."
      when: not kc.stat.exists

    - name: Ensure kubectl is available
      ansible.builtin.command: bash -lc 'command -v kubectl'
      register: kubectl_check
      changed_when: false
      failed_when: kubectl_check.rc != 0

    - name: Ensure helm is available
      ansible.builtin.command: bash -lc 'command -v helm'
      register: helm_check
      changed_when: false
      failed_when: helm_check.rc != 0

    - name: Add/Update Jetstack Helm repo
      ansible.builtin.command:
        cmd: helm repo add {{ helm_repo_name }} {{ helm_repo_url }} --force-update
      register: repo_add
      changed_when: "'... already exists' not in (repo_add.stderr | default(''))"

    - name: Helm repo update
      ansible.builtin.command:
        cmd: helm repo update
      changed_when: false

    - name: Install/Upgrade cert-manager (with CRDs)
      ansible.builtin.command: >
        helm upgrade --install
        -n {{ helm_namespace }} {{ helm_release }} {{ helm_chart }}
        --create-namespace
        --version {{ helm_version }}
        --set crds.enabled=true
        --wait
      register: helm_upgrade
      changed_when: "'STATUS: deployed' in helm_upgrade.stdout or 'STATUS: upgraded' in helm_upgrade.stdout"

    - name: Wait for cert-manager pods to be Ready
      ansible.builtin.command: >
        kubectl wait --for=condition=Ready pods --all
        -n {{ helm_namespace }} --timeout=180s
      changed_when: false

    # -------- Autodetect resources_dir and apply ClusterIssuer --------
    - name: Probe candidate resources dirs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ candidate_resource_dirs }}"
      register: _res_dirs

    - name: Compute first existing resources dir (if any)
      ansible.builtin.set_fact:
        _autodetected_resources_dir: >-
          {{
            (_res_dirs.results
             | selectattr('stat.exists')
             | selectattr('stat.isdir')
             | map(attribute='stat.path')
             | list
            )[0]
          }}
      when: >
        (_res_dirs.results
         | selectattr('stat.exists')
         | selectattr('stat.isdir')
         | list
        ) | length > 0

    - name: Determine final resources_dir (allow -e override)
      ansible.builtin.set_fact:
        resources_dir: "{{ resources_dir | default(_autodetected_resources_dir, true) }}"

    - name: Assert resources dir is found (or provided)
      ansible.builtin.assert:
        that:
          - resources_dir is defined
        fail_msg: >-
          Could not find a resources/ directory. Searched:
          {{ candidate_resource_dirs | join(', ') }}.
          Create one and place '{{ issuer_manifest }}' inside, or override with:
          -e "resources_dir=/absolute/path/to/resources"

    - name: Verify ClusterIssuer manifest exists
      ansible.builtin.stat:
        path: "{{ resources_dir }}/{{ issuer_manifest }}"
      register: issuer_stat

    - name: Fail if ClusterIssuer manifest missing
      ansible.builtin.fail:
        msg: "Missing {{ resources_dir }}/{{ issuer_manifest }}"
      when: not issuer_stat.stat.exists

    - name: Using resources_dir
      ansible.builtin.debug:
        msg: "Using resources_dir={{ resources_dir }}"

    - name: Apply ClusterIssuer
      ansible.builtin.command:
        cmd: kubectl apply -f {{ resources_dir }}/{{ issuer_manifest }}
